package main

import (
	"database/sql"
	"fmt"

	"github.com/cagge/lvl0/getter"
	_ "github.com/lib/pq"
)

const (
	host     = "localhost"
	port     = 5432
	user     = "postgres"
	password = "123123"
	dbname   = "lvl0"
)

func connectBD(t getter.AutoGenerated) error {
	psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
		"password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)
	db, err := sql.Open("postgres", psqlInfo)
	if err != nil {
		return err
	}
	defer db.Close()
	err = db.Ping()
	if err != nil {
		return err
	}
	fmt.Println("Successfully connected BD")
	// var t getter.AutoGenerated
	// t, err = getter.RunData()
	// if err != nil {
	// 	return err
	// }
	_, err = db.Exec("delete from orders")
	if err != nil {
		return err
	}
	sqlInto := fmt.Sprintf("insert into orders (order_uid, track_number, entry, name, phone, zip, city, address, region, email, "+
		"transaction, currency, provider, amount, payment_dt, bank, delivery_cost, goods_total, custom_fee, chrt_id, price, "+
		"rid, items_name, sale, total_price, nm_id, brand, status, locale, delivery_service, sm_id, oof_shard, request_id, size, internal_signature, customer_id, shardkey, date_created) "+
		"values ('%s','%s','%s','%s','%s','%s','%s','%s','%s', '%s','%s','%s', '%s', '%d', '%d', '%s', '%d', '%d', '%d', '%d', '%d', '%s', '%s', '%d', '%d', '%d', '%s', '%d', '%s', '%s', '%d', '%s', '%s', '%s', '%s', '%s', '%s', '%s')",
		t.OrderUID, t.TrackNumber, t.Entry, t.Delivery.Name, t.Delivery.Phone, t.Delivery.Zip, t.Delivery.City, t.Delivery.Address, t.Delivery.Region, t.Delivery.Email,
		t.Payment.Transaction, t.Payment.Currency, t.Payment.Provider, t.Payment.Amount, t.Payment.PaymentDt, t.Payment.Bank, t.Payment.DeliveryCost, t.Payment.GoodsTotal, t.Payment.CustomFee, t.Items[0].ChrtID, t.Items[0].Price,
		t.Items[0].Rid, t.Items[0].Name, t.Items[0].Sale, t.Items[0].TotalPrice, t.Items[0].NmID, t.Items[0].Brand, t.Items[0].Status, t.Locale, t.DeliveryService, t.SmID, t.OofShard, t.Payment.RequestID, t.Items[0].Size, t.InternalSignature, t.CustomerID, t.Shardkey, t.DateCreated)
	_, err = db.Exec(sqlInto)
	if err != nil {
		return err
	}

	return nil
}
func parsBD(uid string) (bool, error) {
	psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
		"password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)
	db, err := sql.Open("postgres", psqlInfo)
	if err != nil {
		return false, err
	}
	defer db.Close()
	rows, err := db.Query("select * from orders")
	products := []getter.AutoGenerated{}

	for rows.Next() {
		p := getter.AutoGenerated{}
		err := rows.Scan(&p.OrderUID)
		if err != nil {
			fmt.Println(err)
			continue
		}
		products = append(products, p)
	}
	for _, p := range products {
		if p.OrderUID == uid {
			return true, nil
		}
		fmt.Println(p.OrderUID)
		restorDate(p.OrderUID)
	}
	fmt.Println("НЕ НАЙДЕНО В КЕШЕ И БАЗЕ")
	return false, nil
}

func restorDate(uid string) {
	psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
		"password=%s dbname=%s sslmode=disable",
		host, port, user, password, dbname)
	db, err := sql.Open("postgres", psqlInfo)
	if err != nil {
		return
	}
	defer db.Close()
	psqlDump := fmt.Sprintf("select * from orders where order_uid = %s", uid)
	_, err = db.Query(psqlDump)
}
