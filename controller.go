package main

import (
	"log"
	"net/http"
	"text/template"
	"time"

	"github.com/cagge/lvl0/getter"
	_ "github.com/lib/pq"
	stan "github.com/nats-io/stan.go"
)

var (
	Memory = make(map[string]getter.AutoGenerated)
)
var table getter.AutoGenerated

func home(w http.ResponseWriter, r *http.Request) {
	order := r.URL.Query().Get("a")
	_, ok := Memory[order]
	if !ok {
		ok, _ = parsBD(order)
		if !ok {
			w.Write([]byte("НЕ НАЙДЕНО!"))
			return
		}
	}
	tmpl_list := []string{"template/index.html", "template/order.tmpl"}
	ts, err := template.ParseFiles(tmpl_list...)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, "Internal Server Error", 500)
		return
	}

	if order != "" {
		err = ts.Execute(w, Memory[order])
		if err != nil {
			log.Println(err.Error())
			http.Error(w, "Internal Server Error", 500)
		}
	} else {
		log.Println(err.Error())
		http.Error(w, "Internal Server Error", 500)
		return
	}

}
func serverStart() {
	mux := http.NewServeMux()
	go mux.HandleFunc("/result", home)
	log.Println("Запуск веб-сервера на http://127.0.0.1:4000")
	err := http.ListenAndServe(":4000", mux)
	log.Fatal(err)
}
func control() error {
	sc, err := stan.Connect("test-cluster", "clientID", stan.NatsURL("nats://localhost:4222"))
	if err != nil {
		return err
	}
	go func() {
		for {
			jsonByte, _ := getter.RunData()
			sc.Publish("order", []byte(jsonByte))

			time.Sleep(3 * time.Second)
		}

	}()
	_, err = sc.Subscribe("order", func(m *stan.Msg) {
		table, err := getter.Under(m.Data)
		Memory[table.OrderUID] = table
		if err != nil {
			return
		}
		err = connectBD(table)
		if err != nil {
			return
		}
		serverStart()
	})
	if err != nil {
		return err
	}

	select {}
	return nil
}
